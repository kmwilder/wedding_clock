#include <Servo.h>
#include "pitches.h"

Servo myServo1; // WARNING: This servo needs 5V, which isn't generated by USB. Need a 9V source! 
Servo myServo2; // FIXME need to make this more like Servo1 when the two are the same model (hi-torque)

//==================================
// Pin Assignments
//==================================
const int triggerPin = 2;
const int resetPin = 3;

const int relayPin = 4;
const int servoPin1 =  9;
const int servoPin2 = 10;
const int soundPin  = 11;


//==================================
// Song Definition
//==================================
int numNotes = 8;

int melody[] = {
  NOTE_C4, NOTE_G3, NOTE_G3, NOTE_A3, NOTE_G3, 0, NOTE_B3, NOTE_C4
};

// note durations: 4 = quarter note, 8 = eighth note, etc.:
int noteDurations[] = {
  4, 8, 8, 4, 4, 4, 4, 4
};


//==================================
// Arduino core functions
//==================================
void setup() {
  pinMode(triggerPin, INPUT); 
  pinMode(resetPin, INPUT);
  pinMode(relayPin, OUTPUT);
}

bool triggered = true;

/*
int pos = 0;
void loop() {
  
  myServo.write(0);
  delay(1000);
  myServo.write(90);
  delay(1000);

  while(pos < 180) {
    myServo.write(pos);
    pos+=10;
    delay(100);
  }
  pos = 0;
  myServo.write(pos);
  
}

*/

void loop() {
  
  int triggerState = digitalRead(triggerPin);
  int resetState = digitalRead(resetPin); // pushbutton, normally open

  if(!triggered && triggerState == LOW) {
    triggered = true;
    digitalWrite(relayPin, HIGH);
    quietServo(0);
    playSong();
    delay(1000);
    
  } else if(triggered && resetState == LOW) {
    triggered = false;
    digitalWrite(relayPin, LOW);
    quietServo(90);
    delay(1000);
  }
}

//==================================
// Helper Functions
//==================================

// Our servo buzzes indefinitely after giving it a position.
// Workaround: only drive servo input while it's moving.
void quietServo(int pos) {
  
  myServo1.attach(servoPin1, 700, 2500);
  myServo1.write(pos);

  myServo2.attach(servoPin2);
  myServo2.write(pos == 0 ? 90 : 0); // want this one to move the other direction

  delay(500);

  myServo1.detach();
  myServo2.detach();
}

// Taken from toneMelody
// http://www.arduino.cc/en/Tutorial/Tone
void playSong() {
  
   // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < numNotes; thisNote++) {

    // to calculate the note duration, take one second divided by the note type.
    //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 1000 / noteDurations[thisNote];
    tone(soundPin, melody[thisNote], noteDuration);

    // to distinguish the notes, set a minimum time between them.
    // the note's duration + 30% seems to work well:
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);
    // stop the tone playing:
    noTone(soundPin);
  }
}

